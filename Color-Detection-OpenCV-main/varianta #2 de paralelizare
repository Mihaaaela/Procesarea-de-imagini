import cv2
import pandas as pd
import threading

# Path to the image
img_path = r'C:\Users\User\Desktop\Color-Detection-OpenCV-main\colorpic.webp'
img = cv2.imread(img_path)

# Global variables
clicked = False
r = g = b = x_pos = y_pos = 0

# Reading csv file with pandas and giving names to each column
index = ["color", "color_name", "hex", "R", "G", "B"]
csv = pd.read_csv('colors.csv', names=index, header=None)

# Event to signal color detection
color_event = threading.Event()

# Function to calculate minimum distance from all colors and get the most matching color
def get_color_name(R, G, B):
    minimum = 10000
    cname = ""
    for i in range(len(csv)):
        d = abs(R - int(csv.loc[i, "R"])) + abs(G - int(csv.loc[i, "G"])) + abs(B - int(csv.loc[i, "B"]))
        if d <= minimum:
            minimum = d
            cname = csv.loc[i, "color_name"]
    return cname

# Function to get x,y coordinates of mouse double click
def draw_function(event, x, y, flags, param):
    global b, g, r, x_pos, y_pos, clicked
    if event == cv2.EVENT_LBUTTONDBLCLK:
        clicked = True
        x_pos = x
        y_pos = y
        b, g, r = img[y, x]
        b = int(b)
        g = int(g)
        r = int(r)
        color_event.set()  # Set the event to trigger color detection

def color_detection():
    global clicked
    while True:
        color_event.wait()  # Wait for the event to be set
        if clicked:
            # cv2.rectangle(image, start point, endpoint, color, thickness)-1 fills entire rectangle
            cv2.rectangle(img, (20, 20), (750, 60), (b, g, r), -1)

            # Creating text string to display( Color name and RGB values )
            text = get_color_name(r, g, b) + ' R=' + str(r) + ' G=' + str(g) + ' B=' + str(b)

            # cv2.putText(img, text, start, font(0-7), fontScale, color, thickness, lineType )
            cv2.putText(img, text, (50, 50), 2, 0.8, (255, 255, 255), 2, cv2.LINE_AA)

            # For very light colors we will display text in black color
            if r + g + b >= 600:
                cv2.putText(img, text, (50, 50), 2, 0.8, (0, 0, 0), 2, cv2.LINE_AA)

            clicked = False
            color_event.clear()  # Clear the event

def main_loop():
    global clicked
    while True:
        cv2.imshow("image", img)
        key = cv2.waitKey(20)
        if key != -1:  # Check if any key is pressed
            if key & 0xFF == 27:  # Check if it is the 'esc' key
                break
        elif cv2.getWindowProperty('image', cv2.WND_PROP_VISIBLE) < 1:  # Check if the window is closed
            break
    cv2.destroyAllWindows()

cv2.namedWindow('image')
cv2.setMouseCallback('image', draw_function)

# Start the color detection thread
thread = threading.Thread(target=color_detection)
thread.start()

# Run the main loop
main_loop()

# Ensure the thread ends gracefully
thread.join()
